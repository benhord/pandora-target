"""Generates a target list for Pandora"""

# Third-party
import astropy.units as u
import numpy as np
import pandas as pd

from .queryarchive import fetch_confirmed_pls, process_confirmed_pls, apply_pl_constraints
from .utils import computeTransSignal

# @dataclass
class TargetList(object):
    """
    Generates and holds the information on the Pandora target list.

    Args:
        TBD : TBD
    """

    def __init__(
            self,
            jmag: u.Quantity = 11.5,
            hmag: u.Quantity = 11,
            period: u.Quantity = 36,
            starRot: u.Quantity = None,
            teff: u.Quantity = 5000,
            H: u.Quantity = 5,
            massSigma: u.Quantity = 0, #change to 5 for release
            tsmThresh: u.Quantity = 1,
            tranSigThresh: u.Quantity = 0,
            toplength: u.Quantity = 25,
            forceDownload: bool = False,
            composite : bool = True,         
    ):
        self.jmag = jmag
        self.hmag= hmag
        self.period = period
        self.starRot = starRot
        self.teff = teff
        self.tsmThresh = tsmThresh
        self.tranSigThresh = tranSigThresh
        self.H = H
        self.massSigma = massSigma
        self.tsm = tsmThresh
        self.toplength = toplength

        self.run_status = True

        #save query params as dictionary that can be altered with a method
        
        self.all_pls = fetch_confirmed_pls(
            forceDownload=forceDownload,
            composite=composite
        )

        self.composite = 'default_flag' not in self.all_pls.columns

        self.all_pls = process_confirmed_pls(self.all_pls, H = self.H)
        self.all_pls['manual_add'] = np.zeros(len(self.all_pls['pl_name']))
        
        self.top_pls = apply_pl_constraints(
            self.all_pls,
            jmag_thresh = self.jmag,
            hmag_thresh = self.hmag,
            period_thresh = self.period,
            teff_thresh = self.teff,
            tsm_thresh = self.tsmThresh,
            tran_signal_thresh = self.tranSigThresh,
            mass_sig_thresh = self.massSigma,
        )
        
        print(self.top_pls)

        # generate shortlist of top 25 targets
        self.shortlist = self.top_pls.head(self.toplength)

    def show_top(self, number=25):
        """
        Method to show the top N Pandora targets.

        Parameters
        ----------

        Returns
        -------
        
        """

        if number == 'all':
            print(self.top_pls)
        else:
            print(self.shortlist)

        #if number > len(shortlist):
        #   function to add next targets to shortlist
        #else:
        #   only display top number on shortlist, including manual adds

    def rerun(self):
        """
        Method to rerun target list using current specified parameters.
        """

        if self.run_status:
            print('Current target list is already up to date!')

        else:
            # Re-apply parameter constraints
            self.top_pls = apply_pl_constraints(
                self.all_pls,
                jmag_thresh = self.jmag,
                hmag_thresh = self.hmag,
                period_thresh = self.period,
                teff_thresh = self.teff,
                tsm_thresh = self.tsm,
                tran_signal_thresh = self.tranSigThresh,
                mass_sig_thresh = self.massSigma,
            )

            # Recalculate expected spectroscopic signal size in case H changed
            if self.composite:
                mass_key = 'pl_bmasse'
            else:
                mass_key = 'pl_masse'
            
            self.top_pls['transSignal'] = computeTransSignal(
                self.all_pls['pl_ratror'],
                self.all_pls['pl_rade'],
                self.all_pls['pl_eqt'],
                self.all_pls[mass_key],
                self.H,
            )

            # Denote that the current parameters have been run with run_status
            self.__dict__.update(run_status=True)
        
        
    def update(self, rerun=False, **params):
        """
        Method to update parameters for the target list.

        Parameters
        ----------
        **params
            Arguments corresponding to parameters and the values that you'd
            like to update them to.
        run : bool
            Flag to determine whether the data set will be remade according
            to the updated parameters.
        """

        # Update specified parameters with specified values
        self.__dict__.update(params)

        # Denote that the current parameters have been run with run_status
        self.__dict__.update(run_status=False)

        # Rerun target list with updated parameters if run=True
        if rerun:
            self.rerun()

    def add(self, planet):
        """
        Add a planet manually to the shortlist of top planets.

        Parameters
        ----------

        Returns
        -------
        """

        #add functionality to parse list of planets or dicts
        #functionality might need to change if a radius distribution is
        #   trying to be kept. Maybe identify which radius bin the desired
        #   planet is in and remove planet specifically from that bin?
        
        if type(planet) is str:
            try:
                # Search for planet and find its row in all_pls
                ix = self.all_pls[self.all_pls['pl_name'] == planet].index
                row = self.all_pls.iloc[ix]
                name = planet
                
            except:
                print('Planet not found! Try another common name or double' +\
                      'check the spelling.')
                
        elif type(planet) is dict:
            row = planet
            name = row['pl_name']

        # Remove bottom planet based on TSM - find radius here?
        #print(self.shortlist['manual_add'])
        #print(self.shortlist['manual_add'])
        self.shortlist = self.shortlist.drop(
            self.shortlist[self.shortlist['manual_add'] == 0].nsmallest(1, 'TSM').index
        )

        # Add in new planet to shortlist
        #self.shortlist = self.shortlist.append(row, ignore_index=True)
        self.shortlist = pd.concat([self.shortlist, row], ignore_index=True)
        
        # Set manual_add flag to 1 for added target
        self.shortlist.loc[
            self.shortlist.tail(1).index,
            'manual_add',
        ] = 1

        # Reset order of planets based on TSM
        self.shortlist = (self.shortlist.sort_values(
            'TSM', ascending=False).reset_index().drop(columns='index'))
        
        #check if added planet is on removed list and take it off that list
        


    #method to save current shortlist as csv

    #method to manually remove target

    #method to clear removed targets? or just have user add them back in

    #method to manually add target

    #method to show current params

    #method to schedule using pandora-schedule

    #add option to pull shortlist targets from different radius bins
